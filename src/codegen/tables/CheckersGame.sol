// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EntityId } from "@dust/world/src/types/EntityId.sol";

struct CheckersGameData {
  EntityId vaultChest;
  uint8 currentPlayer;
  uint256 currentBitmap;
  uint256 kings;
  address winner;
  uint256[2] ownership;
  address[2] players;
}

library CheckersGame {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "checkers", name: "CheckersGame", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462636865636b657273000000000000436865636b65727347616d6500000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0075050220012020140000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bytes32, uint8, uint256, uint256, address, uint256[], address[])
  Schema constant _valueSchema = Schema.wrap(0x007505025f001f1f6181c3000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "gameChest";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "vaultChest";
    fieldNames[1] = "currentPlayer";
    fieldNames[2] = "currentBitmap";
    fieldNames[3] = "kings";
    fieldNames[4] = "winner";
    fieldNames[5] = "ownership";
    fieldNames[6] = "players";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get vaultChest.
   */
  function getVaultChest(EntityId gameChest) internal view returns (EntityId vaultChest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Get vaultChest.
   */
  function _getVaultChest(EntityId gameChest) internal view returns (EntityId vaultChest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Set vaultChest.
   */
  function setVaultChest(EntityId gameChest, EntityId vaultChest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(EntityId.unwrap(vaultChest)), _fieldLayout);
  }

  /**
   * @notice Set vaultChest.
   */
  function _setVaultChest(EntityId gameChest, EntityId vaultChest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(EntityId.unwrap(vaultChest)), _fieldLayout);
  }

  /**
   * @notice Get currentPlayer.
   */
  function getCurrentPlayer(EntityId gameChest) internal view returns (uint8 currentPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get currentPlayer.
   */
  function _getCurrentPlayer(EntityId gameChest) internal view returns (uint8 currentPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set currentPlayer.
   */
  function setCurrentPlayer(EntityId gameChest, uint8 currentPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((currentPlayer)), _fieldLayout);
  }

  /**
   * @notice Set currentPlayer.
   */
  function _setCurrentPlayer(EntityId gameChest, uint8 currentPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((currentPlayer)), _fieldLayout);
  }

  /**
   * @notice Get currentBitmap.
   */
  function getCurrentBitmap(EntityId gameChest) internal view returns (uint256 currentBitmap) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get currentBitmap.
   */
  function _getCurrentBitmap(EntityId gameChest) internal view returns (uint256 currentBitmap) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set currentBitmap.
   */
  function setCurrentBitmap(EntityId gameChest, uint256 currentBitmap) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((currentBitmap)), _fieldLayout);
  }

  /**
   * @notice Set currentBitmap.
   */
  function _setCurrentBitmap(EntityId gameChest, uint256 currentBitmap) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((currentBitmap)), _fieldLayout);
  }

  /**
   * @notice Get kings.
   */
  function getKings(EntityId gameChest) internal view returns (uint256 kings) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get kings.
   */
  function _getKings(EntityId gameChest) internal view returns (uint256 kings) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set kings.
   */
  function setKings(EntityId gameChest, uint256 kings) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((kings)), _fieldLayout);
  }

  /**
   * @notice Set kings.
   */
  function _setKings(EntityId gameChest, uint256 kings) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((kings)), _fieldLayout);
  }

  /**
   * @notice Get winner.
   */
  function getWinner(EntityId gameChest) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get winner.
   */
  function _getWinner(EntityId gameChest) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set winner.
   */
  function setWinner(EntityId gameChest, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function _setWinner(EntityId gameChest, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Get ownership.
   */
  function getOwnership(EntityId gameChest) internal view returns (uint256[2] memory ownership) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint256_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get ownership.
   */
  function _getOwnership(EntityId gameChest) internal view returns (uint256[2] memory ownership) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint256_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set ownership.
   */
  function setOwnership(EntityId gameChest, uint256[2] memory ownership) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode(fromStaticArray_uint256_2(ownership)));
  }

  /**
   * @notice Set ownership.
   */
  function _setOwnership(EntityId gameChest, uint256[2] memory ownership) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode(fromStaticArray_uint256_2(ownership)));
  }

  // The length of ownership
  uint256 constant lengthOwnership = 2;

  /**
   * @notice Get an item of ownership.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemOwnership(EntityId gameChest, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    uint256 dynamicLength = _byteLength / 32;
    uint256 staticLength = 2;

    if (_index < staticLength && _index >= dynamicLength) {
      return (uint256(bytes32(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of ownership.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemOwnership(EntityId gameChest, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    uint256 dynamicLength = _byteLength / 32;
    uint256 staticLength = 2;

    if (_index < staticLength && _index >= dynamicLength) {
      return (uint256(bytes32(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Update an element of ownership at `_index`.
   */
  function updateOwnership(EntityId gameChest, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of ownership at `_index`.
   */
  function _updateOwnership(EntityId gameChest, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get players.
   */
  function getPlayers(EntityId gameChest) internal view returns (address[2] memory players) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_address_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get players.
   */
  function _getPlayers(EntityId gameChest) internal view returns (address[2] memory players) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_address_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set players.
   */
  function setPlayers(EntityId gameChest, address[2] memory players) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_address_2(players)));
  }

  /**
   * @notice Set players.
   */
  function _setPlayers(EntityId gameChest, address[2] memory players) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_address_2(players)));
  }

  // The length of players
  uint256 constant lengthPlayers = 2;

  /**
   * @notice Get an item of players.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemPlayers(EntityId gameChest, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    uint256 dynamicLength = _byteLength / 20;
    uint256 staticLength = 2;

    if (_index < staticLength && _index >= dynamicLength) {
      return (address(bytes20(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of players.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemPlayers(EntityId gameChest, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    uint256 dynamicLength = _byteLength / 20;
    uint256 staticLength = 2;

    if (_index < staticLength && _index >= dynamicLength) {
      return (address(bytes20(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Update an element of players at `_index`.
   */
  function updatePlayers(EntityId gameChest, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of players at `_index`.
   */
  function _updatePlayers(EntityId gameChest, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(EntityId gameChest) internal view returns (CheckersGameData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(EntityId gameChest) internal view returns (CheckersGameData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    EntityId gameChest,
    EntityId vaultChest,
    uint8 currentPlayer,
    uint256 currentBitmap,
    uint256 kings,
    address winner,
    uint256[2] memory ownership,
    address[2] memory players
  ) internal {
    bytes memory _staticData = encodeStatic(vaultChest, currentPlayer, currentBitmap, kings, winner);

    EncodedLengths _encodedLengths = encodeLengths(ownership, players);
    bytes memory _dynamicData = encodeDynamic(ownership, players);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    EntityId gameChest,
    EntityId vaultChest,
    uint8 currentPlayer,
    uint256 currentBitmap,
    uint256 kings,
    address winner,
    uint256[2] memory ownership,
    address[2] memory players
  ) internal {
    bytes memory _staticData = encodeStatic(vaultChest, currentPlayer, currentBitmap, kings, winner);

    EncodedLengths _encodedLengths = encodeLengths(ownership, players);
    bytes memory _dynamicData = encodeDynamic(ownership, players);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(EntityId gameChest, CheckersGameData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.vaultChest,
      _table.currentPlayer,
      _table.currentBitmap,
      _table.kings,
      _table.winner
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.ownership, _table.players);
    bytes memory _dynamicData = encodeDynamic(_table.ownership, _table.players);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(EntityId gameChest, CheckersGameData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.vaultChest,
      _table.currentPlayer,
      _table.currentBitmap,
      _table.kings,
      _table.winner
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.ownership, _table.players);
    bytes memory _dynamicData = encodeDynamic(_table.ownership, _table.players);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (EntityId vaultChest, uint8 currentPlayer, uint256 currentBitmap, uint256 kings, address winner)
  {
    vaultChest = EntityId.wrap(Bytes.getBytes32(_blob, 0));

    currentPlayer = (uint8(Bytes.getBytes1(_blob, 32)));

    currentBitmap = (uint256(Bytes.getBytes32(_blob, 33)));

    kings = (uint256(Bytes.getBytes32(_blob, 65)));

    winner = (address(Bytes.getBytes20(_blob, 97)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[2] memory ownership, address[2] memory players) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    ownership = toStaticArray_uint256_2(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    players = toStaticArray_address_2(SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (CheckersGameData memory _table) {
    (_table.vaultChest, _table.currentPlayer, _table.currentBitmap, _table.kings, _table.winner) = decodeStatic(
      _staticData
    );

    (_table.ownership, _table.players) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(EntityId gameChest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(EntityId gameChest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    EntityId vaultChest,
    uint8 currentPlayer,
    uint256 currentBitmap,
    uint256 kings,
    address winner
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(vaultChest, currentPlayer, currentBitmap, kings, winner);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint256[2] memory ownership,
    address[2] memory players
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(ownership.length * 32, players.length * 20);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[2] memory ownership, address[2] memory players) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode(fromStaticArray_uint256_2(ownership)),
        EncodeArray.encode(fromStaticArray_address_2(players))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    EntityId vaultChest,
    uint8 currentPlayer,
    uint256 currentBitmap,
    uint256 kings,
    address winner,
    uint256[2] memory ownership,
    address[2] memory players
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(vaultChest, currentPlayer, currentBitmap, kings, winner);

    EncodedLengths _encodedLengths = encodeLengths(ownership, players);
    bytes memory _dynamicData = encodeDynamic(ownership, players);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(EntityId gameChest) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = EntityId.unwrap(gameChest);

    return _keyTuple;
  }
}

/**
 * @notice Cast a dynamic array to a static array.
 * @dev In memory static arrays are just dynamic arrays without the 32 length bytes,
 * so this function moves the pointer to the first element of the dynamic array.
 * If the length of the dynamic array is smaller than the static length,
 * the function returns an uninitialized array to avoid memory corruption.
 * @param _value The dynamic array to cast.
 * @return _result The static array.
 */
function toStaticArray_uint256_2(uint256[] memory _value) pure returns (uint256[2] memory _result) {
  if (_value.length < 2) {
    // return an uninitialized array if the length is smaller than the fixed length to avoid memory corruption
    return _result;
  } else {
    // in memory static arrays are just dynamic arrays without the 32 length bytes
    // (without the length check this could lead to memory corruption)
    assembly {
      _result := add(_value, 0x20)
    }
  }
}

/**
 * @notice Cast a dynamic array to a static array.
 * @dev In memory static arrays are just dynamic arrays without the 32 length bytes,
 * so this function moves the pointer to the first element of the dynamic array.
 * If the length of the dynamic array is smaller than the static length,
 * the function returns an uninitialized array to avoid memory corruption.
 * @param _value The dynamic array to cast.
 * @return _result The static array.
 */
function toStaticArray_address_2(address[] memory _value) pure returns (address[2] memory _result) {
  if (_value.length < 2) {
    // return an uninitialized array if the length is smaller than the fixed length to avoid memory corruption
    return _result;
  } else {
    // in memory static arrays are just dynamic arrays without the 32 length bytes
    // (without the length check this could lead to memory corruption)
    assembly {
      _result := add(_value, 0x20)
    }
  }
}

/**
 * @notice Copy a static array to a dynamic array.
 * @dev Static arrays don't have a length prefix, so this function copies the memory from the static array to a new dynamic array.
 * @param _value The static array to copy.
 * @return _result The dynamic array.
 */
function fromStaticArray_uint256_2(uint256[2] memory _value) pure returns (uint256[] memory _result) {
  _result = new uint256[](2);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 64);
}

/**
 * @notice Copy a static array to a dynamic array.
 * @dev Static arrays don't have a length prefix, so this function copies the memory from the static array to a new dynamic array.
 * @param _value The static array to copy.
 * @return _result The dynamic array.
 */
function fromStaticArray_address_2(address[2] memory _value) pure returns (address[] memory _result) {
  _result = new address[](2);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 64);
}
